package com.clutch.app.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.clutch.app.data.api.ClutchApiService
import com.clutch.app.data.model.Car
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

data class CarRegistrationUiState(
    val make: String = "",
    val model: String = "",
    val year: String = "",
    val licensePlate: String = "",
    val vin: String = "",
    val color: String = "",
    val mileage: String = "",
    val fuelType: String = "",
    val transmission: String = "",
    val engineSize: String = "",
    val insuranceCompany: String = "",
    val policyNumber: String = "",
    val insuranceExpiry: String = "",
    val isLoading: Boolean = false,
    val isSuccess: Boolean = false,
    val errorMessage: String? = null,
    val makeError: String? = null,
    val modelError: String? = null,
    val yearError: String? = null,
    val licensePlateError: String? = null,
    val vinError: String? = null,
    val colorError: String? = null,
    val mileageError: String? = null,
    val engineSizeError: String? = null,
    val insuranceCompanyError: String? = null,
    val policyNumberError: String? = null,
    val insuranceExpiryError: String? = null
)

@HiltViewModel
class CarRegistrationViewModel @Inject constructor(
    private val apiService: ClutchApiService
) : ViewModel() {

    private val _uiState = MutableStateFlow(CarRegistrationUiState())
    val uiState: StateFlow<CarRegistrationUiState> = _uiState.asStateFlow()

    fun updateMake(make: String) {
        _uiState.value = _uiState.value.copy(
            make = make,
            makeError = null
        )
    }

    fun updateModel(model: String) {
        _uiState.value = _uiState.value.copy(
            model = model,
            modelError = null
        )
    }

    fun updateYear(year: String) {
        _uiState.value = _uiState.value.copy(
            year = year,
            yearError = null
        )
    }

    fun updateLicensePlate(licensePlate: String) {
        _uiState.value = _uiState.value.copy(
            licensePlate = licensePlate,
            licensePlateError = null
        )
    }

    fun updateVin(vin: String) {
        _uiState.value = _uiState.value.copy(
            vin = vin,
            vinError = null
        )
    }

    fun updateColor(color: String) {
        _uiState.value = _uiState.value.copy(
            color = color,
            colorError = null
        )
    }

    fun updateMileage(mileage: String) {
        _uiState.value = _uiState.value.copy(
            mileage = mileage,
            mileageError = null
        )
    }

    fun updateFuelType(fuelType: String) {
        _uiState.value = _uiState.value.copy(fuelType = fuelType)
    }

    fun updateTransmission(transmission: String) {
        _uiState.value = _uiState.value.copy(transmission = transmission)
    }

    fun updateEngineSize(engineSize: String) {
        _uiState.value = _uiState.value.copy(
            engineSize = engineSize,
            engineSizeError = null
        )
    }

    fun updateInsuranceCompany(insuranceCompany: String) {
        _uiState.value = _uiState.value.copy(
            insuranceCompany = insuranceCompany,
            insuranceCompanyError = null
        )
    }

    fun updatePolicyNumber(policyNumber: String) {
        _uiState.value = _uiState.value.copy(
            policyNumber = policyNumber,
            policyNumberError = null
        )
    }

    fun updateInsuranceExpiry(insuranceExpiry: String) {
        _uiState.value = _uiState.value.copy(
            insuranceExpiry = insuranceExpiry,
            insuranceExpiryError = null
        )
    }

    fun registerCar() {
        if (validateForm()) {
            viewModelScope.launch {
                _uiState.value = _uiState.value.copy(isLoading = true, errorMessage = null)
                
                try {
                    val car = Car(
                        id = "", // Will be generated by backend
                        make = _uiState.value.make,
                        model = _uiState.value.model,
                        year = _uiState.value.year.toIntOrNull() ?: 0,
                        licensePlate = _uiState.value.licensePlate,
                        vin = _uiState.value.vin,
                        color = _uiState.value.color,
                        mileage = _uiState.value.mileage.toIntOrNull() ?: 0,
                        fuelType = _uiState.value.fuelType,
                        transmission = _uiState.value.transmission,
                        engineSize = _uiState.value.engineSize,
                        insuranceCompany = _uiState.value.insuranceCompany,
                        policyNumber = _uiState.value.policyNumber,
                        insuranceExpiry = _uiState.value.insuranceExpiry,
                        lastServiceDate = null,
                        nextServiceDate = null
                    )

                    val response = apiService.addCar(car)
                    if (response.isSuccessful) {
                        _uiState.value = _uiState.value.copy(
                            isLoading = false,
                            isSuccess = true
                        )
                    } else {
                        _uiState.value = _uiState.value.copy(
                            isLoading = false,
                            errorMessage = "Failed to register car. Please try again."
                        )
                    }
                } catch (e: Exception) {
                    _uiState.value = _uiState.value.copy(
                        isLoading = false,
                        errorMessage = "Network error. Please check your connection and try again."
                    )
                }
            }
        }
    }

    private fun validateForm(): Boolean {
        val currentState = _uiState.value
        var isValid = true
        val errors = mutableMapOf<String, String>()

        // Validate make
        if (currentState.make.isBlank()) {
            errors["makeError"] = "Make is required"
            isValid = false
        }

        // Validate model
        if (currentState.model.isBlank()) {
            errors["modelError"] = "Model is required"
            isValid = false
        }

        // Validate year
        if (currentState.year.isBlank()) {
            errors["yearError"] = "Year is required"
            isValid = false
        } else {
            val year = currentState.year.toIntOrNull()
            if (year == null || year < 1900 || year > 2030) {
                errors["yearError"] = "Please enter a valid year"
                isValid = false
            }
        }

        // Validate license plate
        if (currentState.licensePlate.isBlank()) {
            errors["licensePlateError"] = "License plate is required"
            isValid = false
        }

        // Validate VIN (if provided)
        if (currentState.vin.isNotBlank() && currentState.vin.length != 17) {
            errors["vinError"] = "VIN must be 17 characters long"
            isValid = false
        }

        // Validate mileage
        if (currentState.mileage.isBlank()) {
            errors["mileageError"] = "Current mileage is required"
            isValid = false
        } else {
            val mileage = currentState.mileage.toIntOrNull()
            if (mileage == null || mileage < 0) {
                errors["mileageError"] = "Please enter a valid mileage"
                isValid = false
            }
        }

        // Validate engine size (if provided)
        if (currentState.engineSize.isNotBlank()) {
            val engineSizeRegex = Regex("^\\d+\\.\\d+[Ll]$")
            if (!engineSizeRegex.matches(currentState.engineSize)) {
                errors["engineSizeError"] = "Please enter engine size in format like 2.0L"
                isValid = false
            }
        }

        // Validate insurance company
        if (currentState.insuranceCompany.isBlank()) {
            errors["insuranceCompanyError"] = "Insurance company is required"
            isValid = false
        }

        // Validate policy number
        if (currentState.policyNumber.isBlank()) {
            errors["policyNumberError"] = "Policy number is required"
            isValid = false
        }

        // Validate insurance expiry
        if (currentState.insuranceExpiry.isBlank()) {
            errors["insuranceExpiryError"] = "Insurance expiry date is required"
            isValid = false
        } else {
            val dateRegex = Regex("^\\d{2}/\\d{2}/\\d{4}$")
            if (!dateRegex.matches(currentState.insuranceExpiry)) {
                errors["insuranceExpiryError"] = "Please enter date in MM/DD/YYYY format"
                isValid = false
            }
        }

        // Update state with errors
        _uiState.value = _uiState.value.copy(
            makeError = errors["makeError"],
            modelError = errors["modelError"],
            yearError = errors["yearError"],
            licensePlateError = errors["licensePlateError"],
            vinError = errors["vinError"],
            colorError = errors["colorError"],
            mileageError = errors["mileageError"],
            engineSizeError = errors["engineSizeError"],
            insuranceCompanyError = errors["insuranceCompanyError"],
            policyNumberError = errors["policyNumberError"],
            insuranceExpiryError = errors["insuranceExpiryError"]
        )

        return isValid
    }
}
